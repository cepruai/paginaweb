{
    "collab_server" : "",
    "contents" : "#### Script Lab 05\n\nrm(list=ls()) #clear all\ngetwd() \n\n#install.packages(\"rJava\",dependencies = T)\n#install.packages(\"xlsx\",dependencies = T)\n#library(xlsx)\n#install.packages(\"swirl\", dependencies = TRUE)\nlibrary(swirl)\n# este comando te genera un directorio de ayuda con las cosas que se quieren hacer\n\n#swirl()\n\n# Con este comando se pueden tener tutoriales para diversos c√≥digos \n\n\n\ngdpRegiones.2013<-read.csv(\"PIBChileAct.csv\",header = FALSE,stringsAsFactors = FALSE)\n\ngdpRegiones.2013<-gdpRegiones.2013[10:25,]\n\n#gdpRegiones.2013<-read.xlsx(\"PIBR_Act.xls\",header = FALSE,sheetName = \"Referencia 2013_nominal\",startRow = 10,endRow = 25,stringsAsFactors=FALSE)\n\n\n\n#read everything and delete the blank rows\n\ngdpRegiones<-read.csv(\"PIBChileAct.csv\",header = FALSE,stringsAsFactors = FALSE)\ngdpRegiones<-gdpRegiones[c(10:25,27:42,44:59),]\ngdpRegiones<-gdpRegiones[,1:15]\n\nclass(gdpRegiones)\ndim(gdpRegiones)\nhead(gdpRegiones)\n\n#adding variable labels\nvnames<-c(\"Ano\",\"Region\",\"Agricultura\",\"Pesca\",\"Mineria\",\"Manufactura\",\"EGA\",\"Construccion\",\"Com/Rest/Hoteles\",\"Transp/Com\",\"SsFinanEmp\",\"SsVivienda\",\"SsPersonales\",\"AdmPublica\",\"PIBTotal\")\nnames(gdpRegiones)<-vnames\nView(gdpRegiones)\n\n#filling gaps\nis.na(gdpRegiones[,\"Ano\"])\n\ngdpRegiones[2:16,\"Ano\"]<-2013\ngdpRegiones[18:32,\"Ano\"]<-2014\ngdpRegiones[34:48,\"Ano\"]<-2015\n\n\n#changing the data as data.table (most things are easier in data.table format!)\nlibrary(data.table)\ngdpRegiones<-data.table(gdpRegiones)\nclass(gdpRegiones$Region)\ngdpRegiones$Region<-as.character(gdpRegiones$Region)\ngdpRegiones$region2<-as.numeric(as.roman(gdpRegiones$Region))\n\ntotals<-gdpRegiones$Region==\"Total\"\nRM<-gdpRegiones$Region==\"RMS\"\n\ngdpRegiones$region2[RM]<-13\ngdpRegiones$region2[totals]<-16\n\ntable(gdpRegiones$Region,gdpRegiones$region2)\n\n#toy example\ncounts_df <- data.frame(\n  day = c(\"Monday\", \"Tuesday\", \"Wednesday\"),\n  wolf = c(2, 1, 3),\n  hare = c(20, 25, 30),\n  fox = c(4, 4, 4)\n)\n\nlibrary(tidyr)\n#reshaping wide to long\ncounts_gather <- gather(counts_df,\n                        key = \"species\",\n                        value = \"count\",\n                        wolf:fox)\n\n#less efficient function reshape\nnames(counts_df)[2:4]<-paste0(\"Value.\",names(counts_df)[2:4])\nreshape(counts_df,direction = \"long\",varying = names(counts_df)[2:4])\n\n#reshaping long to wide\ncounts_spread <- spread(counts_gather,\n                        key = species,\n                        value = count)\n\n\n# now let's do it with our data\ngdpRegiones2<-gather(gdpRegiones,key = \"sector\",value = \"GDP\",Agricultura:AdmPublica)\n\ngdpRegiones2$region2<-as.numeric(as.roman(gdpRegiones2$Region))\n\ntotals<-gdpRegiones2$Region==\"Total\"\nRM<-gdpRegiones2$Region==\"RMS\"\n\ngdpRegiones2$region2[RM]<-13\ngdpRegiones2$region2[totals]<-16\n\nkeep<-names(gdpRegiones2)[c(1:2,4:6)]\ngdpRegiones2<-gdpRegiones2[,keep]\n\n#getting poligons centroids\n# read map of Chilean regions\nlibrary(maptools)\n\nproj.CL<- \"+proj=longlat +datum=WGS84 +no_defs\"\n\n#reading shapefile\nreg.CL <- readShapePoly(\"regiones_chile/regiones_chile.shp\",proj4string = CRS(as.character(proj.CL)))\n\nsubstr(reg.CL@data$FIPS_ADMIN,start = 3,stop = 5)\nas.numeric(substr(reg.CL@data$FIPS_ADMIN,start = 3,stop = 5))\nreg.CL@data$region<-as.numeric(substr(reg.CL@data$FIPS_ADMIN,start = 3,stop = 5))\n\n\n# centroid coordinates\ncentroids<-data.frame(coordinates(reg.CL))\ncentroids$region<-reg.CL@data$region\nnames(centroids)[1:2]<-c(\"lon\",\"lat\")\nord<-reg.CL@data$region\n\ncentroids<-centroids[order(centroids$region),]\n\nplot(reg.CL)\npoints(centroids,col='red')\n\n\n###### for loops#######\nfor(i in 1:10){\n  print(i)\n}\n\nAA<-matrix(0,10,1)\nfor(i in 1:10){\n  AA[i,1]<-i*exp(i)\n}\n\nAA<-matrix(0,10,10)\nfor(i in 1:10){\n  for(j in 1:10){\n    AA[i,j]<-i*exp(j) \n  }\n}\n\n###### while loops#######\n###first ten powers of the number a\ni<-1\na<-2\nx<-array(0,c(1,10))\nwhile (i<= 10){\n  x[,i]<-a^i\n  i=i+1\n}\nx\n\n###mean of a random vector less than eps \ni<-10\nx<-rnorm(i)\neps<-0.0001\nwhile (abs(mean(x))>eps) {\n  i<-i*2\n  x<-rnorm(i)\n}\nmean(x)\nlength(x)\n\n\n#calculating distances between regions\n#install.packages(\"McSpatial\")\nlibrary(McSpatial)\n\nDistMat<-matrix(0,13,13)\n\nfor(i in 1:13){\n  for(j in 1:13){\n    print(paste(\"I'm in Region \",i,\"with Region \",j))\n    DistMat[i,j]<-1.60934*(geodistance(centroids[i,\"lon\"],centroids[i,\"lat\"],\n                                       centroids[j,\"lon\"],centroids[j,\"lat\"])$dist)\n  }\n}\ncolnames(DistMat)<-centroids$region\nrownames(DistMat)<-centroids$region\n\n#fixing some measurement errors\ndiag(DistMat)<-0\n\n\nclass(gdpRegiones2)\ngdpRegiones2<-data.table(gdpRegiones2)\n\n# Issue 1: chaning the numbering of the regions again\narica<-gdpRegiones2$region==15\nlosrios<-gdpRegiones2$region==14\n\ngdpRegiones2$region13 <- gdpRegiones2$region\n\ngdpRegiones2$region13[arica]<-1\ngdpRegiones2$region13[losrios]<-10\n\ngdpRegiones2<-gdpRegiones2[region2!=16,]\n\ngdpRegiones2<-gdpRegiones2[(region2!=15 & region2!=14),]\n\ngdpRegiones2[,region2:=NULL]\n\n# Issue 2: take out the comma from each cell in the GDP variable\n#why the comma is a problem?\nas.numeric(gdpRegiones2[,\"GDP\"])\ngdpRegiones2$GDP[1:15]\ngsub(\",\",\"\",gdpRegiones2$GDP[1:15])\nas.numeric(gsub(\",\",\"\",gdpRegiones2$GDP[1:15]))\nsum(as.numeric(gsub(\",\",\"\",gdpRegiones2$GDP[1:15]))) # verificando\n\ngdpRegiones2$GDP<-as.numeric(gsub(\",\",\"\",gdpRegiones2$GDP))\n\n#Issue 3: aggregating the data by region13 and Ano\nsetkey(gdpRegiones2,Ano,region13)\n\ngdpRegiones2[,GDP2:=sum(GDP),by=.(region13,Ano)]\ngdpRegiones2Agregado<-gdpRegiones2[,sum(GDP),by=.(region13,Ano)]\nnames(gdpRegiones2Agregado)[3]<-\"GDP\"\n\n\n# Way 1: using the aggregated table\ngdpRegiones2Agregado$MP<-0\n\nfor(y in 2013:2015){\n  for(i in 1:13){\n    gdpRegiones2Agregado[Ano==y & region13==i,\"MP\"]<-sum(gdpRegiones2Agregado[Ano==y & region13==i,\"GDP\"]/DistMat[i,-i])\n  }  \n}\n\n# Way 2: using the cleanned original data\ngdpRegiones2$MP<-0\n\nfor(y in 2013:2015){\n  for(i in 1:13){\n    gdpRegiones2[Ano==y & region13==i,\"MP\"]<-sum(gdpRegiones2[Ano==y & region13==i,\"GDP2\"][1]/DistMat[i,-i])\n  }  \n}\n\n\n## Adding data to the map\n#reshaping data to fit in the map data structure\ntoadd.MP<-spread(data =gdpRegiones2Agregado[,-\"GDP\"],key =Ano,value = MP)\nnames(toadd.MP)[2:4]<-paste0(\"MP.\",names(toadd.MP)[2:4])\n\ntoadd.GDP<-spread(data =gdpRegiones2Agregado[,-\"MP\"],key =Ano,value = GDP)\nnames(toadd.GDP)[2:4]<-paste0(\"GDP.\",names(toadd.GDP)[2:4])\n\ntoadd<-cbind(toadd.GDP,toadd.MP[,-\"region13\"])\n\n\nord<-reg.CL@data$region\nnewTable<-merge(reg.CL@data,toadd,by.x=\"region\",by.y=\"region13\")\n\nnewTable<-newTable[ord,16:21]\n\nreg.CL@data<-cbind(reg.CL@data,newTable)\n\n\n## Creating a web interactive map\n# Run any of the install.packages() commands below for packages that are not yet on your system\n#install.packages(\"leaflet\",dependencies = T)\nlibrary(leaflet)\n\ncolors <- sort(heat.colors(5, alpha = 0.8),decreasing = T)\nMP.Palette <- colorNumeric(palette = colors, domain=reg.CL@data$MP.2013)\nregCL.popup <- paste0(\"<b>CT: \", reg.CL@data$ADMIN_NAME, \"</b><br />Market Potential: \", reg.CL@data$MP.2013)\n\nleaflet(reg.CL) %>%\n  addProviderTiles(\"CartoDB.Positron\") %>%\n  addPolygons(stroke=TRUE,\n              weight=1,\n              smoothFactor = 0.2, \n              fillOpacity = .8, \n              popup=regCL.popup, \n              color= ~MP.Palette(reg.CL@data$MP.2013)\n  ) %>%\n  addLegend(\"bottomleft\",pal=MP.Palette,values=~MP.2013)\n\n\n#ploting static maps\n# for 1 year and one variable\nb1 <- quantile(reg.CL@data$MP.2013  , probs=seq(0,1,0.2),na.rm = FALSE)\nnp <- findInterval(reg.CL@data$MP.2013, b1, all.inside=TRUE)\ncolors <- sort(heat.colors(5, alpha = 0.8),decreasing = T)\nplot(reg.CL, col=colors[np], main=\"Potencial de Mercado Chile 2013\")\nlegend(\"topleft\", legend=leglabs(round(b1, digits=1)),\n       fill=colors, bty=\"n\", cex=0.8)\n\n\n#for all years and all variables and exported to pdf\n\nvarnames<-names(toadd)[5:7]\n\nfor(i in 1:length(varnames)){\n  eval(parse(text = paste0(\"pdf(file = 'examplePlot.\",varnames[i],\".pdf',width = 8,height = 11.5)\")))\n  eval(parse(text = paste0(\"b1 <- quantile(reg.CL@data$\",varnames[i],\", probs=seq(0,1,0.2),na.rm = FALSE)\")))\n  eval(parse(text = paste0(\"np <- findInterval(reg.CL@data$\",varnames[i],\", b1, all.inside=TRUE)\")))\n  colors <- sort(heat.colors(5, alpha = 0.8),decreasing = T)\n  year<-substr(x = varnames[i],start = 5,stop = 8)\n  variable<-ifelse(i<=3,\"Producto Interno Bruto\",\"Potencial de Mercado\")\n  eval(parse(text=paste0(\"plot(reg.CL, col=colors[np], main='\",variable,\" Chile\",year,\"')\")))\n  legend(\"topleft\", legend=leglabs(round(b1, digits=1)),\n         fill=colors, bty=\"n\", cex=0.8)\n  dev.off()\n}\n\n\n",
    "created" : 1496084767027.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "323782903",
    "id" : "31875C06",
    "lastKnownWriteTime" : 1496085678,
    "last_content_update" : 1496085678323,
    "path" : "C:/Users/Felipe/Desktop/R_data/Lab05R/ScriptLab05.R",
    "project_path" : null,
    "properties" : {
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}